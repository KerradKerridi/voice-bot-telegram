import configparser
import os
import sys
from pathlib import Path
from time import sleep
from db import BotDB
import telebot
import random
from datetime import datetime
import time
from telebot import types

#–ù–∞—Å—Ç—Ä–æ–π–∫–∏
config_path = os.path.join(sys.path[0], 'settings.ini')
config = configparser.ConfigParser()
config.read(config_path)
#TELEGRAM
BOT_TOKEN = config.get('Telegram', 'listen_bot_token')
GROUP_FOR_LOGS = config.get('Telegram', 'group_for_logs')
IMPORTANT_LOGS = config.get('Telegram', 'important_logs')
PREVIEW_LINK = config.getboolean('Telegram', 'PREVIEW_LINK')
#SETTINGS
LOGS = config.getboolean('Settings', 'logs')


#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –±–∞–∑—É
bot = telebot.TeleBot(BOT_TOKEN, parse_mode=None)
BotDB = BotDB('tg-bot-database')



def telegram_bot():
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        try:
            name_stick_hello = list(Path('Stick').rglob('Hello_*'))
            number_stick_hello = random.randint(1, len(name_stick_hello))
            random_stick_hello = open(name_stick_hello[number_stick_hello], 'rb')
            #logging
            if LOGS:
                bot.forward_message(chat_id=GROUP_FOR_LOGS,
                                from_chat_id=message.chat.id,
                                message_id=message.message_id)
            bot.send_sticker(message.chat.id, random_stick_hello)
            sleep(0.3)
            #–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ –æ —é–∑–µ—Ä–µ –≤ –ë–î
            user_id = message.from_user.id
            first_name = message.from_user.first_name
            full_name = message.from_user.full_name
            username = message.from_user.username
            language_code = message.from_user.language_code
            time_UTC = int(time.time())
            date_added = datetime.fromtimestamp(time_UTC)
            BotDB.add_new_user_in_db(user_id, first_name, full_name, username, language_code, date_added)
            #–°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤–æ–π—Å–æ–≤
            folder_path = 'voice_users'
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)
            else:
                pass
        except:
            if LOGS:
                bot.send_message(IMPORTANT_LOGS, "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –ª–∞–∂–∞–µ—Ç")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item1 = types.KeyboardButton("üé§–í—ã—Å–∫–∞–∑–∞—Ç—å—Å—è")
        item2 = types.KeyboardButton("üéß–ü–æ—Å–ª—É—à–∞—Ç—å")
        markup.add(item1, item2)
        bot.send_message(message.chat.id, "<b>–ü—Ä–∏–≤–µ—Ç.</b>", parse_mode='html', reply_markup=markup,
                         disable_web_page_preview=not PREVIEW_LINK)
        time.sleep(0.3)
        bot.send_message(message.chat.id, "<i>–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –ª—é–¥–µ–π</i>", parse_mode='html', reply_markup=markup,
                         disable_web_page_preview=not PREVIEW_LINK)
        time.sleep(1)
        bot.send_message(message.chat.id, "–≠—Ç–æ –ø–æ—á—Ç–∏ –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ, –ø–æ–ª–æ–∂–∏—Ç—å –µ–≥–æ –≤ –±—É—Ç—ã–ª–∫—É –∏ —à–≤—ã—Ä–Ω—É—Ç—å –≤ –æ–∫–µ–∞–Ω. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–∑–Ω–∞–µ—à—å, –ø–æ—Å–ª—É—à–∞–ª –µ–≥–æ –∫—Ç–æ-—Ç–æ –∏–ª–∏ –Ω–µ—Ç –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ–∂–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è..", parse_mode='html', reply_markup=markup,
                         disable_web_page_preview=not PREVIEW_LINK)
        time.sleep(0.8)
        bot.send_message(message.chat.id, "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å, –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö (–∏–ª–∏ —Å–ø–µ—Ç—å, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω—å–µ)", parse_mode='html', reply_markup=markup,
                         disable_web_page_preview=not PREVIEW_LINK)
        time.sleep(0.8)
        msg = bot.send_message(message.chat.id, "<b>–Ω—É –≤—Å—ë, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. –∑–∞–ø–∏—Å—ã–≤–∞–π—Å—è! –ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ç–≤–æ–π - </b> üé§", parse_mode='html', reply_markup=markup,
                         disable_web_page_preview=not PREVIEW_LINK)
        bot.register_next_step_handler(msg, standup)


    def last_message():
        # —Ñ—É–Ω–∫—Ü–∏—è —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ"
        date_from_db = BotDB.last_date_audio()
        parse_date = datetime.strptime(date_from_db, "%Y-%m-%d %H:%M:%S")
        last_voice_time_timestamp = time.mktime(parse_date.timetuple())
        time_now_timestamp = time.time()
        date_difference = time_now_timestamp - last_voice_time_timestamp
        # —Å—á–∏—Ç–∞–µ–º –º–∏–Ω—É—Ç—ã, —á–∞—Å—ã, –¥–Ω–∏
        much_minutes_ago = round(date_difference / 60, 0)
        much_hour_ago = round(date_difference / 3600, 0)
        much_days_ago = int(round(much_hour_ago / 24, 0))
        message_with_date = ''
        if much_minutes_ago <= 60:
            word_minute = plural_time(1, much_minutes_ago)
            message_with_date = f'<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ {word_minute} –Ω–∞–∑–∞–¥</b>'
        elif much_minutes_ago > 60 and much_hour_ago <= 24:
            word_hour = plural_time(2, much_hour_ago)
            message_with_date = f'<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ {word_hour} –Ω–∞–∑–∞–¥</b>'
        elif much_hour_ago > 24:
            word_day = plural_time(3, much_days_ago)
            message_with_date = f'<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ {word_day} –Ω–∞–∑–∞–¥</b>'
        return message_with_date

    def standup(message):
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–±–∞–≤–ª—è–µ–º
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item1 = types.KeyboardButton("üé§–í—ã—Å–∫–∞–∑–∞—Ç—å—Å—è")
        item2 = types.KeyboardButton("üéß–ü–æ—Å–ª—É—à–∞—Ç—å")
        markup.add(item1, item2)
        if message.text == 'üé§–í—ã—Å–∫–∞–∑–∞—Ç—å—Å—è':
            markup = types.ReplyKeyboardRemove()
            if LOGS:
                # logging
                bot.forward_message(chat_id=GROUP_FOR_LOGS,
                                    from_chat_id=message.chat.id,
                                    message_id=message.message_id)
            msg = bot.send_message(chat_id=message.chat.id, text='–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=markup)
            is_exists = BotDB.is_audio_exists()
            if is_exists == True:
                message_with_date = last_message()
                msg = bot.send_message(chat_id=message.chat.id, text=message_with_date, parse_mode="html")
                bot.register_next_step_handler(msg, save_voice_message)
            else:
                bot.register_next_step_handler(msg, save_voice_message)
        elif message.text == 'üéß–ü–æ—Å–ª—É—à–∞—Ç—å':
            check_audio = BotDB.check_listen_audio(user_id=message.from_user.id)
            list_audio = list(check_audio)
            if list_audio == []:
                msg = bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–∏, —Ç—ã –ø—Ä–æ—Å–ª—É—à–∞–ª –≤—Å–µ –∞—É–¥–∏–æüòî. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—à–∞ –±–∞–∑–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è', reply_markup=markup)
                is_audio_exist = BotDB.is_audio_exists()
                if is_audio_exist == True:
                    message_with_date = last_message()
                    msg = bot.send_message(chat_id=message.chat.id, text=message_with_date, parse_mode="html")
                    bot.register_next_step_handler(msg, standup)
                else:
                    bot.register_next_step_handler(msg, standup)
            else:
                number_element = random.randint(0, len(list_audio) - 1)
                audio_for_user = check_audio[number_element]
                path = Path(f'voice_users/{audio_for_user}.ogg')
                voice = open(path, 'rb')
                #–ú–∞—Ä–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω–æ–µ
                BotDB.mark_listened_audio(audio_for_user, user_id=message.from_user.id)

                msg = bot.send_voice(message.chat.id, voice=voice, reply_markup=markup)
                bot.register_next_step_handler(msg, standup)

            if LOGS:
                # logging
                bot.forward_message(chat_id=GROUP_FOR_LOGS,
                                    from_chat_id=message.chat.id,
                                    message_id=message.message_id)
        elif message.text == '/restart':
            msg = bot.send_message(message.chat.id, '–Ø –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µü•≥', reply_markup=markup)
            bot.forward_message(chat_id=GROUP_FOR_LOGS,
                                from_chat_id=message.chat.id,
                                message_id=message.message_id)
            bot.register_next_step_handler(msg, standup)
        else:
            msg = bot.send_message(chat_id=message.chat.id, text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é', reply_markup=markup)
            bot.register_next_step_handler(msg, standup)


    def plural_time(type, n):
        word = []
        if type == 1:
            word = ['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç']
        elif type == 2:
            word = ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤']
        elif type == 3:
            word = ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']
        else:
            pass

        if n % 10 == 1 and n % 100 != 11:
            p = 0
        elif 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):
            p = 1
        else:
            p = 2
        new_number = int(n)
        return str(new_number) + ' ' + word[p]

    def save_voice_message(message):
        if message.content_type == 'voice':
            file_id = 1
            #–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            is_having_audio_from_user = BotDB.get_last_user_audio_record(user_id=message.from_user.id)
            if is_having_audio_from_user is False:
                #–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                file_name = f'message_from_{message.from_user.id}_number_{file_id}'
            else:
                #–ò–Ω–∞—á–µ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –ë–î, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–π 1, –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                file_name = BotDB.get_path_for_audio_record(user_id=message.from_user.id)
                file_id = BotDB.get_id_for_audio_record(message.from_user.id) + 1
                path = Path(f'voice_users/{file_name}.ogg')
                if path.exists():
                    file_name = f'message_from_{message.from_user.id}_number_{file_id}'
                else:
                    pass
            #–°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            author_id = message.from_user.id
            time_UTC = int(time.time())
            date_added = datetime.fromtimestamp(time_UTC)
            #–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–∫—É
            BotDB.add_audio_record(file_name, author_id, date_added, 0, file_id)
            #–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            file_info = bot.get_file(message.voice.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            with open(f'voice_users/{file_name}.ogg', 'wb') as new_file:
                new_file.write(downloaded_file)
            #–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            item1 = types.KeyboardButton("üé§–í—ã—Å–∫–∞–∑–∞—Ç—å—Å—è")
            item2 = types.KeyboardButton("üéß–ü–æ—Å–ª—É—à–∞—Ç—å")
            markup.add(item1, item2)
            bot.send_message(chat_id=message.chat.id, text='–û–∫–µ–π, —Å–æ—Ö—Ä–∞–Ω–∏–ª!üëå', reply_markup=markup)
            #menu_standup(message=message)
            bot.register_next_step_handler(message, standup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            item1 = types.KeyboardButton("üé§–í—ã—Å–∫–∞–∑–∞—Ç—å—Å—è")
            item2 = types.KeyboardButton("üéß–ü–æ—Å–ª—É—à–∞—Ç—å")
            markup.add(item1, item2)
            msg = bot.send_message(chat_id=message.chat.id, text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—éü§∑‚Äç‚ôÄÔ∏è –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ', reply_markup=markup)
            bot.register_next_step_handler(msg, standup)

    @bot.message_handler(commands=['restart'])
    def restart_function(message):
        return standup(message)

if __name__ == '__main__':
    telegram_bot()
    try:
        bot.polling(none_stop=True)
        bot.enable_save_next_step_handlers(delay=2)
        bot.load_next_step_handlers()
    except ConnectionError as e:
        if LOGS:
            bot.send_message(IMPORTANT_LOGS, "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–æ—Ç–µ—Ä—è–ª –≤–æ–π—Å –±–æ—Ç —Å–≤—è–∑—å")
    except Exception as r:
        if LOGS:
            bot.send_message(IMPORTANT_LOGS, "–ü—Ä–æ–∏–∑–æ—à–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ, —Ö–µ–ª–ø. –í–æ–π—Å –±–æ—Ç –±–æ–ª–µ–µ—Ç")
    finally:
        if LOGS:
            bot.send_message(IMPORTANT_LOGS, '–Ø –≤–æ–π—Å –±–æ—Ç —É–ø–∞–ª, –ø–æ–º–æ–≥–∏—Ç–µ')